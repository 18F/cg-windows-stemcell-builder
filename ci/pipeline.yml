resource_types:
- name: semver-iam
  type: docker-image
  source:
    repository: governmentpaas/semver-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

resources:
# repos
- name: ci
  type: git
  source:
    branch: ((CI_BRANCH))
    uri: https://github.com/cloudfoundry-incubator/greenhouse-ci.git
- name: config
  type: git
  source:
    branch: ((CONFIG_BRANCH))
    uri: https://github.com/18F/cg-windows-stemcell-builder.git
- name: stemcell-builder-develop
  type: git
  source:
    branch: develop
    uri: https://github.com/cloudfoundry-incubator/bosh-windows-stemcell-builder.git
- name: stemcell-builder
  type: git
  source:
    branch: ((STEMCELL_BUILDER_BRANCH))
    uri: https://github.com/cloudfoundry-incubator/bosh-windows-stemcell-builder.git
- name: windows-stemcell-dependencies
  type: git
  source:
    branch: master
    uri: git@github.com:pivotal-cf/windows-stemcell-dependencies.git

# github releases
- name: openssh-release
  type: github-release
  source:
    user: PowerShell
    repository: Win32-OpenSSH
    access_token: ((GREENHOUSE_CI_ACCESS_TOKEN))

# versions
- name: stemcells-main-version
  type: semver-iam
  source:
    bucket: ((ROOT_BUCKET))
    key: 2012R2/versions/main
    initial_version: 1200.0.0
- name: aws-stemcell-version
  type: semver-iam
  source:
    bucket: ((ROOT_BUCKET))
    key: 2012R2/versions/aws
    initial_version: 1200.0.0

# locks
- name: aws-lock
  type: pool
  source:
    branch: master
    pool: ((AWS_LOCK))
    private_key: ((BOSH-WINDOWS-LOCKS-CI_KEY))
    uri: git@github.com:pivotal-cf-experimental/Bosh-Windows-Locks

# s3 buckets
- name: aws-regional
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/inputs/light-bosh-stemcell-(.*)-aws-xen-hvm-windows2012R2-go_agent-((AWS_PACKER_REGION)).tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: packer-output-ami
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/inputs/packer-output-ami-(.*).txt
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: aws-2012-untested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/light-bosh-stemcell-(.*)-aws-xen-hvm-windows2012R2-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: aws-2012-tested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: 2012R2/tested/aws/light-bosh-stemcell-(.*)-aws-xen-hvm-windows2012R2-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: aws-stemcell-final
  type: s3-iam
  source:
    bucket: bosh-windows-stemcells-production
    region_name: us-gov-west-1
    regexp: light-bosh-stemcell-(.*)-aws-xen-hvm-windows2012R2-go_agent.tgz
- name: base-amis-win2012r2
  type: s3-iam
  source:
    bucket: ((ROOT_BUCKET))
    regexp: 2012R2/untested/aws/inputs/base-amis-windows2012R2-(.*).json

jobs:
- name: test-stemcell-builder
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: stemcell-builder-develop
      trigger: true
    - get: stemcell-builder-master
      resource: stemcell-builder
  - task: test-stemcell-builder
    file: ci/bosh-windows-stemcell-builder/rspec/task.yml
    input_mapping: {stemcell-builder: stemcell-builder-develop}

- name: build
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: config
    - get: stemcell-builder
      passed: [test-stemcell-builder]
    - get: windows-stemcell-dependencies
    - get: version
      resource: stemcells-main-version
      params:
        bump: patch
  - put: stemcells-main-version
    params:
      file: version/number
  - put: aws-stemcell-version
    params:
      file: version/number
  - task: collect-win2012r2-amis
    file: config/collect-base-amis/task.yml
    output_mapping: { base-amis: win2012r2-amis }
    tags: [iaas]
    params:
      BASE_AMI: windows2012R2
      BASE_AMI_NAME: ((BASE_AMI_NAME))
  - put: base-amis-win2012r2
    params:
      file: win2012r2-amis/base-amis-windows2012R2-*.json

- name: create-aws
  serial: true
  plan:
  - put: aws-lock
    params:
      acquire: true
  - do:
    - aggregate:
      - get: ci
      - get: stemcell-builder
        passed: [build]
      - get: base-amis
        resource: base-amis-win2012r2
        passed: [build]
      - get: version
        resource: aws-stemcell-version
        passed: [build]
        trigger: true
      - get: windows-stemcell-dependencies
      - get: main-version
        resource: stemcells-main-version
        passed: [build]
      - get: sshd
        resource: openssh-release
        version: { tag: ((OPEN_SSH_VERSION)) }
    - put: version
      resource: aws-stemcell-version
      params:
        pre: build
    - task: create-packer-ci-key
      privileged: true
      config:
        platform: linux
        image_resource: { type: docker-image, source: {repository: pivotalgreenhouse/ci } }
        outputs:
        - name: packer-ci-private-key
        run:
          path: bash
          args:
          - "-c"
          - 'echo "$PACKER_CI" > packer-ci-private-key/key && chmod 600 packer-ci-private-key/key'
        params:
          PACKER_CI: ((PACKER_CI_PRIVATE_KEY))
    - task: create-stemcell
      timeout: 1h30m
      attempts: 3
      file: ci/bosh-windows-stemcell-builder/create-aws-stemcell/task.yml
      params:
        OS_VERSION: windows2012R2
        REGION: ((AWS_PACKER_REGION))
        AWS_ACCESS_KEY: ((BOSH_WINDOWS_AWS_STEMCELLS_ACCESS_KEY_ID))
        AWS_SECRET_KEY: ((BOSH_WINDOWS_AWS_STEMCELLS_SECRET_ACCESS_KEY))
        OUTPUT_BUCKET_NAME: ((AWS_REGIONAL_BUCKET))
    - aggregate:
      - put: aws-regional
        params:
          file: bosh-windows-stemcell/light-bosh-stemcell-*-aws-xen-hvm-windows2012R2-go_agent-((AWS_PACKER_REGION)).tgz
      - put: packer-output-ami
        params:
          file: amis/packer-output-ami-*.txt
    ensure:
      do:
      - task: delete-orphan-vms
        file: ci/delete-vms/task.yml
        params:
          AWS_ACCESS_KEY_ID: ((BOSH_WINDOWS_AWS_STEMCELLS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((BOSH_WINDOWS_AWS_STEMCELLS_SECRET_ACCESS_KEY))
      - put: aws-lock
        params:
          release: aws-lock

- name: copy-regions-aws
  serial: true
  plan:
  - do:
    - aggregate:
      - get: aws-regional
        passed: [create-aws]
      - get: ci
      - get: stemcell-builder
        passed: [create-aws]
      - get: base-amis
        resource: base-amis-win2012r2
        passed: [create-aws]
      - get: version
        resource: aws-stemcell-version
        passed: [create-aws]
        trigger: true
      - get: main-version
        resource: stemcells-main-version
        passed: [create-aws]
      - get: amis
        resource: packer-output-ami
        passed: [create-aws]
    - task: copy-stemcells
      timeout: 1h30m
      attempts: 3
      file: ci/bosh-windows-stemcell-builder/copy-aws-stemcell/task.yml
      params:
        OS_VERSION: windows2012R2
        AWS_ACCESS_KEY: ((BOSH_WINDOWS_AWS_STEMCELLS_ACCESS_KEY_ID))
        AWS_SECRET_KEY: ((BOSH_WINDOWS_AWS_STEMCELLS_SECRET_ACCESS_KEY))
        OUTPUT_BUCKET_NAME: ((AWS_REGIONAL_BUCKET))
        REGIONS: "us-gov-west-1"
    - put: aws-2012-untested
      params:
        file: bosh-windows-stemcell/light-bosh-stemcell-*-aws-xen-hvm-windows2012R2-go_agent.tgz

- name: test-aws
  serial: true
  plan:
  - aggregate:
    - get: bosh-windows-stemcell
      resource: aws-2012-untested
      passed: [copy-regions-aws]
    - get: ci
    - get: stemcell-builder
      passed: [copy-regions-aws]
    - get: base-amis
      resource: base-amis-win2012r2
      passed: [copy-regions-aws]
    - get: version
      resource: aws-stemcell-version
      passed: [copy-regions-aws]
      trigger: true
    - get: stemcells-main-version
      passed: [copy-regions-aws]
  - task: test-stemcell
    file: ci/bosh-windows-stemcell-builder/bwats/task.yml
    input_mapping: { stemcell: bosh-windows-stemcell }
    attempts: 5
    params:
      BOSH_CLIENT_SECRET: ((BOSH_CONCOURSE_BOSH_PASSWORD))
      BOSH_CLIENT: ((BOSH_CONCOURSE_BOSH_USER))
      BOSH_TARGET: ((BOSH_CONCOURSE_DIRECTOR_IP))
      BOSH_CA_CERT: ((BOSH_CONCOURSE_BOSH_TARGET_CERT))
      STEMCELL_PATH: stemcell/light-bosh-stemcell-*-aws-xen-hvm-windows2012R2-go_agent.tgz
      STEMCELL_OS: windows2012R2
  - put: aws-2012-tested
    params:
      file: bosh-windows-stemcell/light-bosh-stemcell-*-aws-xen-hvm-windows2012R2-go_agent.tgz

- name: promote
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: aws-2012-tested
      passed: [test-aws]
    - get: stemcell-builder
      passed: [test-aws]
    - get: version
      resource: stemcells-main-version
      passed: [test-aws]
  - task: ensure-versions-match
    config:
      platform: linux
      image_resource: {type: docker-image, source: {repository: pivotalgreenhouse/ci}}
      inputs:
        - name: ci
        - name: aws-2012-tested
      run:
        path: ci/match-stemcell-versions/run

- name: promote-aws
  serial: true
  plan:
  - do:
    - aggregate:
      - get: ci
      - get: aws-2012-tested
        passed: [promote]
        trigger: true
      - get: stemcell-builder
        passed: [promote]
      - get: version
        resource: stemcells-main-version
        passed: [promote]
    - task: test-aws-stemcell
      input_mapping: { stemcell: aws-2012-tested }
      file: ci/bosh-windows-stemcell-builder/bwats/task.yml
      attempts: 5
      params:
        BOSH_CA_CERT: ((BOSH_CONCOURSE_BOSH_TARGET_CERT))
        BOSH_CLIENT: ((BOSH_CONCOURSE_BOSH_USER))
        BOSH_CLIENT_SECRET: ((BOSH_CONCOURSE_BOSH_PASSWORD))
        BOSH_TARGET: ((BOSH_CONCOURSE_DIRECTOR_IP))
        GINKGO_FOCUS: "is fully updated"
        STEMCELL_OS: windows2012R2
        STEMCELL_PATH: stemcell/light-bosh-stemcell-*-aws-xen-hvm-windows2012R2-go_agent.tgz
    - task: aws-set-stemcell-filename-version
      input_mapping: { bosh-windows-stemcell: aws-2012-tested }
      file: ci/set-stemcell-version/task.yml
    - aggregate:
      - task: commit-dev-meta4-file
        file: ci/bosh-windows-stemcell-builder/commit-meta4-file/task.yml
        input_mapping: { stemcell: final-stemcell }
        params:
          IAAS: aws
          OS_NAME: windows
          OS_VERSION: 2012R2
    - aggregate:
      - put: aws-stemcell-final-s3
        resource: aws-stemcell-final
        params:
          file: final-stemcell/light-bosh-stemcell-*-aws-xen-hvm-windows2012R2-go_agent.tgz
